# -*- coding: utf-8 -*-
"""yolov3_pubg3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K_d1F0fEDWr8ztt-XdgMJizjO7Gjo_bF
"""

#Hey what up,people! Hope you're having a good day! 
#Here I'm gonna show ya how to set up YOLOv3 the darknet version on Colab
#And use it to process images, video, and, especially, TRAIN your models!!
#You can contant me at https://twitter.com/Ivangrov, if you have questions
#Or something's not working
#Are you excited? Let's go!
#Don't forget to select GPU! 


#First, let's get some updates
!apt-get update
!apt-get upgrade

!apt-get install build-essential
!apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev

!apt-get install libavcodec-dev libavformat-dev libswscale-d

!apt-get -y install cmake
!which cmake

!cmake --version

#Installing OpenCV
!apt-get install libopencv-dev

!pwd

#!rm -r darknet

!git clone https://github.com/AlexeyAB/darknet/

!apt-get install vim

# %cd darknet

!wget https://pjreddie.com/media/files/yolov3.weights

!ls
!sed -i 's/OPENCV=0/OPENCV=1/g' Makefile
!sed -i 's/GPU=0/GPU=1/g' Makefile

!ls
# %cd ../
!ls

!apt install g++-5
!apt install gcc-5

!update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10
!update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 20
!update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10
!update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 20
!update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30
!update-alternatives --set cc /usr/bin/gcc
!update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30
!update-alternatives --set c++ /usr/bin/g++

!apt update -qq;
!wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
!dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
!apt-get update -qq

#Here were are installing compilers and creating some links
!apt-get install cuda -y -qq #gcc-5 g++-5 
#!ln -s /usr/bin/gcc-5 /usr/local/cuda/bin/gcc
#!ln -s /usr/bin/g++-5 /usr/local/cuda/bin/g++
!apt update
!apt upgrade
!apt install cuda-8.0 -y

#Now let's see whether the GPU is here and CUDA was successfully installed!
import tensorflow as tf
device_name = tf.test.gpu_device_name()
print(device_name)

print("'sup!'")

!/usr/local/cuda/bin/nvcc --version

# %cd darknet
!make

!ls
#Now, let's see if everything works by running it on a test image
!./darknet detect cfg/yolov3.cfg yolov3.weights data/person.jpg

#Let's define some functions that will let us show images, and upload and 
#download files
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  #plt.rcParams['figure.figsize'] = [10, 5]
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()
  
  
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)
def download(path):
  from google.colab import files
  files.download(path)

imShow('predictions.jpg')



"""**Rest i do just for adjust folders so dont follow this new one will be commin g soon**"""

#%cd data
#!ls

#%cd colab

#%cd ../

#%cd content

#!pwd

#upload()

#!unzip obj.zip

#%cd darknet

#upload()

#!pwd

#%cd ../

#!ls

#!cp -r content/drive/My Drive/pubg_T.mp4 content/darknet

# Mounting Drive with colab
from google.colab import drive

#!ls

drive.mount('/content/drive')

!ls

# to copy my mp4 file drive to colab
!cp '/content/drive/My Drive/pubg2_T.mp4' '/content/darknet'

# %cd darknet

# to train the model
!./darknet detector demo data/obj.data yolov3-tiny_aa.cfg backup/yolov3-tiny_aa_2000.weights -dont_show pubg2_T.mp4 -i 0 -out_filename pubg_yolo.avi

